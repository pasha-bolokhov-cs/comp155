Normalization Lab 
Name: Pasha Bolokhov

1. What is the definition of zero normal form?

	The usual spreadsheet / table form of data




2. Express the information in the grooming ledger above in zero normal form.  e.g. provide an appropriate entity name in upper case then write out the attributes like this:   ENTITY_NAME (attribute1, attribute2, ...)


	grooming (till_receipt, customer_id, fname, lname, caddress, cpostal,
		  service_date, store_id, store_address,
		  dog1, dog1_breed, attendant1_id, attendant1_name, treatment1, treatment1_cost,
		  dog2, dog2_breed, attendant2_id, attendant2_name, treatment2, treatment2_cost,
		  dog3, dog3_breed, attendant3_id, attendant3_name, treatment3, treatment3_cost)
		  



3. What is the definition of first normal form?

   	there is a primary key, and no repeating groups (all cells are atomic)




4. Express the information into first normal form.  Underline the primary key for each entity.

	Dogs are the repeating groups

	grooming (**till_receipt**, customer_id, fname, lname, caddress, cpostal,
		  service_date, store_id, store_address,
		  dog_name, dog_breed, attendant_id, attendant_name, treatment, treatment_cost)

	This repeats for each of the customer's dogs, possibly serviced on the same time appointment

	Assuming now that each dog will create a separate "till_receipt", the latter
	can be considered the primary key

	So the candidate keys are:

	{ till_receipt },
	{ customer_id, service_date, dog }
	{ fname, lname, caddress, service_date, dog }   -- because "fname", "lname" and "caddress"
							   determine the customer



5. What is the definition of second normal form?

   	* First Normal Form
	* No non-prime attribute depends on any proper subset of *any* candidate key
	  (that is, every non-prime element depends on the whole candidate key (and on every such key))




6. Express the information into second normal form.  Underline the primary key for each entity.

	Here is where the table splits
	Customer name and address depends only on the "id"

		customers (**customer_id**, fname, lname, caddress, cpostal)
		grooming (**till_receipt**, customer_id,
			  service_date, store_id, store_address,
			  dog_name, dog_breed, attendant_id, attendant_name, treatment, treatment_cost)

	Here "cpostal" depends only on "caddress"!
	So formally "customers" is not in Second Form, although for practical reasons
	it is silly to separate the postal code from the address
	(because then we'll be duplicating Canada Post database)
	
	Ok, let's split off the postal codes:

		customers (**customer_id**, fname, lname, caddress)
		addresses (**caddress**, cpostal)


	Overall we have

		customers (**customer_id**, fname, lname, caddress)			IINF
		addresses (**caddress**, cpostal)					IINF
		grooming (**till_receipt**, customer_id,				??NF
			  service_date, store_id, store_address,
			  dog_name, dog_breed, attendant_id, attendant_name, 
			  treatment, treatment_cost)


	Again the candidate keys are

		{ till_receipt },
		{ customer_id, service_date, dog_name }

	Here "store_id" depends only on "customer_id" and "service_date", because
	presumably all customer's dogs should be washed at the same store

	So we split off "appointments" from "grooming":

		customers (**customer_id**, fname, lname, caddress)			IINF
		addresses (**caddress**, cpostal)					IINF
		appointments (**customer_id, service_date**, store_id, store_address)	IINF
		grooming (**till_receipt**, customer_id,
			  service_date, dog_name, dog_breed,
			  attendant_id, attendant_name,
			  treatment, treatment_cost)

		{ till_receipt },
		{ customer_id, service_date, dog_name }




7. What is the definition of third normal form?

	* Second Normal Form
	* All non-prime elements depends on each superkey
	  (the non-prime elements cannot depend on other non-prime elements)




8. Express the information into third normal form. Underline the primary key for each entity.

	Here it is where the table splits down further
	"store_address" only depends on "store_id"
	"dog_breed" only depends on "dog_name" and "customer_id"
	"attendant_name" on "attendant_id"
	"treatment_cost" on "treatment"

		stores (**store_id**, store_address)
		dogs (**customer_id, dog_name**, dog_breed)
		attendants (**attendant_id**, attendant_name)
		rates (**treatment**, treatment_cost)

	and we are left with


		customers (**customer_id**, fname, lname, caddress)			IINF
		addresses (**caddress**, cpostal)					IINF
		appointments (**customer_id, service_date**, store_id, store_address)	IINF
		grooming (**till_receipt**, customer_id,
			  service_date, dog_name,
			  attendant_id, treatment)

	Again, the candidate keys for "grooming" are

		{ till_receipt }
		{ customer_id, service_date, dog_name }

	The only non-prime elements are "attendant_id" and "treatment", and they
	do not depend on each other ==> IIINF

	In fact, in all these tables, there is nothing that would not depend on
	complete candidate keys, so we conclude,

	******************************************************************************************
	*											 *
	*	stores (**store_id**, store_address)					BCNF	 *
	*	dogs (**customer_id, dog_name**, dog_breed)				BCNF	 *
	*	attendants (**attendant_id**, attendant_name)				BCNF	 *
	*	rates (**treatment**, treatment_cost)					BCNF	 *
	*										    	 *
	*	customers (**customer_id**, fname, lname, caddress)			BCNF	 *
	*	addresses (**caddress**, cpostal)					BCNF	 *
	*	appointments (**customer_id, service_date**, store_id)			BCNF	 *
	*	grooming (**till_receipt**, customer_id,				BCNF	 *
	*		  service_date, dog_name,						 *
	*		  attendant_id, treatment)						 *
	*											 *
	******************************************************************************************

	Seemingly they are also IVNF, as the only multivalued dependence is

		customer_id -->> dog_name

	in table "grooming", but here "dog_name" will actually depend on the
	"service_date" and "customer_id", or alternatively on "till_receipt"

	So we conclude that the tables are IVNF	
	
	It also looks like further splitting of the tables "customers" and "grooming"
	is possible => but it does not change the primary keys: 

		{customer_id} and {till_receipt}

	correspondingly => looks like the forms are ***VNF***

